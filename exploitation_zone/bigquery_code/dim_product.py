import logging 
import os 
import configparser
import json
from pyspark.sql import SparkSession
from datetime import datetime
from pyspark.sql.window import Window
from pyspark.sql.functions import row_number, lit


# Configure logging
logging.basicConfig(level=logging.INFO)  # Set log level to INFO

# Create logger object
logger = logging.getLogger()

# Get the path to the parent parent directory
root_dir = os.path.abspath(os.path.join(os.getcwd()))

# Specify the path to config file
config_file_path = os.path.join(root_dir, "config.ini")
config = configparser.ConfigParser()
config.read(config_file_path)

config_file_path_json = os.path.join(root_dir, "config.json")
with open(config_file_path_json) as f:
    config_json = json.load(f)


if __name__ == "__main__":
     # Write data to BigQuery
    project_id = 'formal-atrium-418823'
    dataset_id = 'spicyquery'
    gcs_config = config["GCS"]["credentials_path"]
    raw_bucket_name = config["GCS"]["raw_bucket_name"]
    formatted_bucket_name = config["GCS"]["formatted_bucket_name"]
    exploitation_bucket_name = config["GCS"]["exploitation_bucket_name"]

    spark = SparkSession.builder \
        .appName("Product Dimension table creation") \
        .config("spark.driver.host", "127.0.0.1") \
        .config("spark.hadoop.fs.gs.impl", "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem") \
        .config("spark.hadoop.fs.AbstractFileSystem.gs.impl", "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS") \
        .config('spark.jars', '/home/pce/Documents/VBP_Joint_Project-main/spark-bigquery-with-dependencies_2.12-0.27.0.jar') \
        .config("spark.hadoop.google.cloud.auth.service.account.enable", "true") \
        .config("spark.hadoop.google.cloud.auth.service.account.json.keyfile", gcs_config) \
        .config("temporaryGcsBucket", raw_bucket_name) \
        .config("parentProject", project_id) \
        .config("project", project_id) \
        .getOrCreate()

    # Read the Parquet file into a DataFrame from GCS Raw Bucket
    customer_purchase_df = spark.read.parquet('gs://'+raw_bucket_name+'/customer_purchase*.parquet')
    

    logger.info('-----------------------------------------------------')
    logger.info("Creating product dimension table")

    product_df = customer_purchase_df.select("product_name").dropDuplicates()

    window_spec = Window.orderBy("product_name")
    product_df = product_df.withColumn("product_id", row_number().over(window_spec)).select("product_id","product_name")

    # Add created_on
    product_df = product_df.withColumn("created_on",lit(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    product_df.write \
    .format('bigquery') \
    .option('table', f'{project_id}:{dataset_id}.dim_product') \
    .option('temporaryGcsBucket', raw_bucket_name) \
    .mode('overwrite') \
    .save()
    # # 
    # product_df.printSchema()

   
    # product_df.write.mode('overwrite').parquet(f'/home/pce/Documents/VBP_Joint_Project-main/dim_table/dim_product.parquet')
 