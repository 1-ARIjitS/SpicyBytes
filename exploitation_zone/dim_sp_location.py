
import logging 
import os 
import configparser
import json
from pyspark.sql import SparkSession
from datetime import datetime
from pyspark.sql.functions import udf, monotonically_increasing_id, col, regexp_replace, lit

# Configure logging
logging.basicConfig(level=logging.INFO)  # Set log level to INFO

# Create logger object
logger = logging.getLogger()

# Get base directory
root_dir = os.path.abspath(os.path.join(os.getcwd()))

# Specify the path to config file
config_file_path = os.path.join(root_dir, "config.ini")
config = configparser.ConfigParser()
config.read(config_file_path)

config_file_path_json = os.path.join(root_dir, "config.json")
with open(config_file_path_json) as f:
    config_json = json.load(f)


if __name__ == "__main__":
    project_id = config["BIGQUERY"]["project_id"]
    dataset_id = config["BIGQUERY"]["dataset_id"]
    gcs_config = config["GCS"]["credentials_path"]
    raw_bucket_name = config["GCS"]["raw_bucket_name"]
    formatted_bucket_name = config["GCS"]["formatted_bucket_name"]
    exploitation_bucket_name = config["GCS"]["exploitation_bucket_name"]

    spark = SparkSession.builder \
        .appName("Product Dimension table creation") \
        .config("spark.driver.host", "127.0.0.1") \
        .config("spark.hadoop.fs.gs.impl", "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem") \
        .config("spark.hadoop.fs.AbstractFileSystem.gs.impl", "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFS") \
        .config('spark.jars', 'spark-bigquery-with-dependencies_2.12-0.27.0.jar') \
        .config("spark.hadoop.google.cloud.auth.service.account.enable", "true") \
        .config("spark.hadoop.google.cloud.auth.service.account.json.keyfile", gcs_config) \
        .config("temporaryGcsBucket", raw_bucket_name) \
        .config("parentProject", project_id) \
        .config("project", project_id) \
        .getOrCreate()
   
    logger.info('-----------------------------------------------------')
    logger.info("Creating supermarket dimension table")

     # Read the Parquet file into a DataFrame from GCS Bucket
    supermarket_df = spark.read.parquet('gs://'+formatted_bucket_name+'/establishments_catalonia*.parquet')

    # Drop duplicates if present
    supermarket_df = supermarket_df.dropDuplicates()
    # supermarket_df.show()

    supermarket_df = supermarket_df.withColumnRenamed("id","supermarket_id")\
                                    .withColumnRenamed("commercial_name","supermarket_name")
    
    loc_df = supermarket_df.select('full_address', "UTMx", "UTMy", "latitude", "longitude")
    loc_df = loc_df.withColumn("location_id", monotonically_increasing_id()+7000) # To generate supermarket_id starting from id=7000

    sp_loc_df = supermarket_df.join(loc_df, ['full_address', "UTMx", "UTMy", "latitude", "longitude"])

    dim_supermarket = sp_loc_df.select("supermarket_id", "supermarket_name", "location_id")
    dim_supermarket = dim_supermarket.dropDuplicates()

    dim_sp_location = sp_loc_df.select("location_id", "full_address", "UTMx", "UTMy", "latitude", "longitude")
    dim_sp_location = dim_sp_location.dropDuplicates()

    # Add created_on
    dim_supermarket = dim_supermarket.withColumn("created_on",lit(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    dim_sp_location = dim_sp_location.withColumn("created_on",lit(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    # dim_supermarket.show()
    
    logger.info("Writng supermarket dimension table")
    
    dim_supermarket.write \
    .format('bigquery') \
    .option('table', f'{project_id}:{dataset_id}.dim_supermarket') \
    .mode('overwrite') \
    .save()    
        
    logger.info("writing supermarket location dimension table")
    
    dim_sp_location.write \
    .format('bigquery') \
    .option('table', f'{project_id}:{dataset_id}.dim_supermarket_location') \
    .mode('overwrite') \
    .save()

    dim_supermarket.write.mode('overwrite').parquet(os.path.join(root_dir,'data','exploitation_zone','dim_supermarket.parquet'))
    dim_sp_location.write.mode('overwrite').parquet(os.path.join(root_dir,'data','exploitation_zone','dim_supermarket_location.parquet'))

    spark.stop()