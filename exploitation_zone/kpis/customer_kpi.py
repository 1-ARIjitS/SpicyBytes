from google.cloud import bigquery
from google.oauth2 import service_account

gcs_config= "D:/BDMA/UPC/BDM/P1/VBP_Joint_Project/gcs_config.json"

# Authenticate with BigQuery
credentials = service_account.Credentials.from_service_account_file(
    gcs_config
)

# Bigquery configs
project_id= "formal-atrium-418823"
project_dataset= "spicyquery"

# Initialize a BigQuery client
client = bigquery.Client(credentials=credentials, project=credentials.project_id)

# Define your queries

tables_and_facts = {
    'fact_business_cust_purchase': f"SELECT * FROM {project_id}.{project_dataset}.fact_cust_inventory",
    'fact_business_inventory': f"SELECT * FROM {project_id}.{project_dataset}.dim_date",
    # Add other queries as needed
}


def execute_query(client, query):
    query_job = client.query(query)
    # # Print the results
    # for row in query_job:
    #     print(row)
    df = query_job.to_dataframe()
    print(df.head(10))

# test query
test= f'''SELECT * FROM {project_id}.{project_dataset}.fact_cust_inventory'''

# customer acquisition rate
query_1= f'''
SELECT d.year, d.month, COUNT(DISTINCT ci.customer_id) AS new_customers
FROM
    {project_id}.{project_dataset}.fact_cust_inventory ci
JOIN
    {project_id}.{project_dataset}.dim_date d
ON
    CAST(ci.purchase_date_id AS STRING) = CAST(d.date_id AS STRING)
GROUP BY
    d.year, d.month
ORDER BY
    d.year, d.month;
'''

# customer retention rate
query_2= f'''
WITH first_purchases AS (
    SELECT
        ci.customer_id,
        MIN(CAST(d.date_id AS STRING)) AS first_purchase_date_id
    FROM
        {project_id}.{project_dataset}.fact_cust_inventory ci
    JOIN
        {project_id}.{project_dataset}.dim_date d
    ON
        CAST(ci.purchase_date_id AS STRING) = CAST(d.date_id AS STRING)
    GROUP BY
        ci.customer_id
),
repeat_purchases AS (
    SELECT
        ci.customer_id,
        d.year,
        d.month
    FROM
        {project_id}.{project_dataset}.fact_cust_inventory ci
    JOIN
        first_purchases fp
    ON
        CAST(ci.customer_id AS STRING) = CAST(fp.customer_id AS STRING)
    JOIN
        {project_id}.{project_dataset}.dim_date d
    ON
        CAST(ci.purchase_date_id AS STRING) = CAST(d.date_id AS STRING)
    WHERE
        PARSE_DATE('%Y%m%d', CAST(d.date_id AS STRING)) > PARSE_DATE('%Y%m%d', CAST(fp.first_purchase_date_id AS STRING))
)
SELECT
    d.year,
    d.month,
    COUNT(DISTINCT rp.customer_id) AS repeat_customers
FROM
    repeat_purchases rp
JOIN
    {project_id}.{project_dataset}.dim_date d
ON
    rp.year = d.year AND rp.month = d.month
GROUP BY
    d.year, d.month
ORDER BY
    d.year, d.month;
'''

# Average customer lifetime value 
query_3= f'''
CREATE OR REPLACE VIEW {project_id}.{project_dataset}.average_clv AS
WITH customer_revenue AS (
    SELECT
        ci.customer_id,
        SUM(CAST(ci.quantity AS INTEGER) * CAST(ci.unit_price AS FLOAT64)) AS total_revenue
    FROM
        {project_id}.{project_dataset}.fact_cust_inventory ci
    GROUP BY
        ci.customer_id
)
SELECT
    AVG(total_revenue) AS average_clv
FROM
    customer_revenue;
'''

# customer churn rate
query_4= f'''
WITH last_purchase AS (
    SELECT
        ci.customer_id,
        MAX(CAST(d.date_id AS STRING)) AS last_purchase_date_id
    FROM
        {project_id}.{project_dataset}.fact_cust_inventory ci
    JOIN
        {project_id}.{project_dataset}.dim_date d
    ON
        CAST(ci.purchase_date_id AS STRING) = CAST(d.date_id AS STRING)
    GROUP BY
        ci.customer_id
)
SELECT
    d.year,
    d.month,
    COUNT(DISTINCT lp.customer_id) AS churned_customers
FROM
    last_purchase lp
JOIN
    {project_id}.{project_dataset}.dim_date d
ON
    CAST(lp.last_purchase_date_id AS STRING) = CAST(d.date_id AS STRING)
WHERE
    PARSE_DATE('%Y%m%d', CAST(d.date_id AS STRING)) < DATE_SUB(CURRENT_DATE(), INTERVAL 1 MONTH)
GROUP BY
    d.year, d.month
ORDER BY
    d.year, d.month;
'''

if __name__=="__main__":
    execute_query(client=client, query=query_4)